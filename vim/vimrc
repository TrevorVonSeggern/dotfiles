set directory=$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath+=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

runtime plugins.vim

call plug#begin('$XDG_DATA_HOME/vim/plugged')
" Ui
Plug 'HenryNewcomer/vim-theme-papaya'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" C#
Plug 'OmniSharp/omnisharp-vim'
Plug 'w0rp/ale'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/async.vim'
Plug 'janko/vim-test'
Plug 'tpope/vim-dispatch'

" Python
Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'

" Angular
"Plug 'Quramy/tsuquyomi'
Plug 'leafgarland/typescript-vim'
"Plug 'Quramy/vim-js-pretty-template'
"Plug 'jason0x43/vim-js-indent'
"Plug 'Quramy/vim-dtsm'
"Plug 'mhartington/vim-typings'

"Html
Plug 'mattn/emmet-vim'

" Core general editing
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf.vim' " definitely need both. Not actually duplicate fzf installs.
Plug 'junegunn/fzf', { 'dir': '$XDG_CACHE_HOME/vim/fzf', 'do': './install --all' }
Plug 'gioele/vim-autoswap'
Plug 'vim-scripts/LargeFile'

" other general editing
Plug 'ervandew/supertab'
Plug 'tpope/vim-fugitive'

" MarkDown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'JamshedVesuna/vim-markdown-preview'

call plug#end()

" for some reason ui needs to be loaded after...
runtime ui.vim

filetype indent plugin on

set completeopt=menuone,noinsert,noselect,preview
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_force_refresh_on_context_changed = 1

let g:airline#extensions#tabline#enabled = 1


let g:test#csharp#runner='dotnettest'
let test#strategy = "dispatch"

" This adds a large preview split screen on the top of the terminal
" let g:omnicomplete_fetch_full_documentation = 1

let g:ale_linters = { 'cs': ['OmniSharp'] }

" supertab config
let g:SuperTabDefaultCompletionType = "<c-n>"

" nerdtree config
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeQuitOnOpen = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
map <C-w><C-w> :NERDTreeToggle %<CR> " ctrl ww opens nerdtree
let NERDTreeIgnore = ['bin', 'obj', '\.js.map$']

" emmit (html)
let g:user_emmet_leader_key=','
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" Markdown
let g:vim_markdown_folding_disabled = 1
let vim_markdown_preview_github=1

" angular
let g:SuperTabDefaultCompletionType = 'context'
let g:tsuquyomi_use_vimproc=1
