set directory=$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath+=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

runtime plugins.vim

call plug#begin('$XDG_DATA_HOME/vim/plugged')
" Ui
Plug 'flazz/vim-colorschemes' " so many colors!
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'editorconfig/editorconfig-vim' " respect .editorconfig
Plug 'scrooloose/nerdtree'
Plug 'w0rp/ale' " linter. It is a client for language servers.
Plug 'ajh17/vimcompletesme' " alternatives => supertab, youcompleteme
Plug 'junegunn/fzf.vim' " definitely need both fzf plugs. Not actually duplicate fzf installs.
Plug 'junegunn/fzf', { 'dir': '$XDG_CACHE_HOME/vim/fzf', 'do': './install --all' }
Plug 'gioele/vim-autoswap' " because swap files get in the way.
Plug 'tpope/vim-fugitive' " git

" Language specific plugins
Plug 'OmniSharp/omnisharp-vim' " C#
Plug 'davidhalter/jedi-vim' " Python
Plug 'mattn/emmet-vim' " Html

" Angular
"Plug 'Quramy/tsuquyomi'
Plug 'leafgarland/typescript-vim'
"Plug 'Quramy/vim-js-pretty-template'
"Plug 'Quramy/vim-dtsm'
"Plug 'mhartington/vim-typings'

call plug#end()

" for some reason ui needs to be loaded after...
runtime ui.vim

" this is needed for loading .vim file in the ftplugin. That way specific
" settings only get applied to specific file types.
filetype indent plugin on

" Tab completion options
set completeopt=longest,menuone

" airline ==>==>====<==<==
let g:airline#extensions#tabline#enabled = 1 " show errors in the status line

" ale settings
let g:ale_fix_on_save = 1
let g:ale_sign_column_always = 1 " keeps the gutter on the left open always.
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace']
\}

" nerdtree config
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeQuitOnOpen = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
map <C-w><C-w> :NERDTreeToggle %<CR> " ctrl ww opens nerdtree
let NERDTreeIgnore = ['bin', 'obj', '\.js.map$']

" emmit should lazy install.
let user_emmet_install_global = 0
